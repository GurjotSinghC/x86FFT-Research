    1 				.data
    2                   
    3 10010000 00000000	pointer:	.double	0
    4                   
    5 10010008         	onevalbuffer:	.space	15
    6 				.align	8
    7          00000000	_O_RDWR: 	= 0x0000
    8          00004000	_O_TEXT: 	= 0x4000
    9                   	
   10 10010100 20756f59	readerrorhandelign:	.asciiz	"You failed to read the file somehow"
   11                   	
   12 10010124 00000000	filehandle:	.word	0
   13 					.data
   14          00000004	file:		.struct	
   15          00000000	readhead:	.word	0
   16 				.data
   17 10010128 61746144	file.name:	.asciiz	"Data.txt"
   18                   	
   19 10010131 7074756f	file.output:	.asciiz	"output.txt"
   20 				.align	8
   21 				.code
   22                   file.readfile:
   23                   
   24 00400000 23bd0000		addi	$sp,$sp,fp.s4-fp.a4	# standard stack frame
   25 00400004 afbe0000		sw	$fp,fp.fp-fp.s4($sp)
   26 00400008 23be0000		add	$fp,$sp,fp.fp-fp.s4
   27 0040000c afdf0000		sw	$ra,fp.ra($fp)
   28 00400010 afd00000		sw	$s0,fp.s0($fp)
   29 00400014 afd10000		sw	$s1,fp.s1($fp)
   30 00400018 afd20000		sw	$s2,fp.s2($fp)
   31 0040001c afd30000		sw	$s3,fp.s3($fp)
   32 00400020 afd40000		sw	$s4,fp.s4($fp)
   33 00400024 afc40000		sw	$a0,fp.a0($fp)
   34 00400028 afc50000		sw	$a1,fp.a1($fp)
   35 0040002c afc60000		sw	$a2,fp.a2($fp)
   36 00400030 afc70000		sw	$a3,fp.a3($fp)
   37                   	
   38                   	
   39 				la	$a0,file.name
   39 00400034 3c041001		lui	$a0,0x1001
   39 00400038 34840128		ori	$a0,$a0,0x128
   40 				addi	$a1,_O_RDWR|_O_TEXT
   40 0040003c 20a54000		addi	$a1,$a1,_O_RDWR|_O_TEXT
   41 00400040 0000034c		syscall	$open
   42 				sw	$v0,filehandle
   42 00400044 3c011001		lui	$at,filehandle&0x8000<<1+filehandle>>16
   42 00400048 ac220124		sw	$v0,filehandle&0xFFFF($at)
   43                   # 	mov	$a0,$v0
   44                   # 	li	$a1,0
   45                   # 	li	$a2,0
   46                   # 	syscall	$position
   47                   
   48                   		#bunch ofmacros that include load immdeiates if oyu put a constant in an load immediate or in a macro that 
   49                   	#gets subustited with a load imaediate there fore the value has to be knowne before you invoke a macro
   50                   	#use to do less aggreseiv ethigns in teh macros 
   51                   	#
   52                   
   53 				li	$t0,'\n
   53 0040004c 3408000a		ori	$t0,$0,0x0A
   54 				la	$a1,onevalbuffer
   54 00400050 3c051001		lui	$a1,0x1001
   54 00400054 34a50008		ori	$a1,$a1,0x08
   55                   
   56 00400058 00402021		mov	$a0,$v0
   57 				li	$a2,1
   57 0040005c 34060001		ori	$a2,$0,0x01
   58                   
   59                   	
   60                   1:	
   61 				lw	$a0,filehandle
   61 00400060 3c011001		lui	$at,filehandle&0x8000<<1+filehandle>>16
   61 00400064 8c240124		lw	$a0,filehandle&0xFFFF($at)	
   62 00400068 0000038c		syscall	$read
   63 0040006c 80aa0000		lb	$t2,($a1)
   64 00400070 01402021		mov	$a0,$t2
   65 00400074 000002cc		syscall	$print_char
   66 				addi	$a1,1
   66 00400078 20a50001		addi	$a1,$a1,1
   67 0040007c 150afff8		bne	$t0,$t2,1b
   68                   
   69 				li	$t0,'\0
   69 00400080 34080000		ori	$t0,$0,0x00
   70 00400084 a0a80000		sb	$t0,($a1)
   71 				la	$a0,onevalbuffer
   71 00400088 3c041001		lui	$a0,0x1001
   71 0040008c 34840008		ori	$a0,$a0,0x08
   72 00400090 0000078c		syscall	$string2double
   73 00400094 46200306		mov.d	$f12,$f0
   74 00400098 000000cc		syscall	$print_double
   75 0040009c 46200024		cvt.w.d	$f0,$f0
   76 004000a0 44080000		mfc1	$t0,$f0
   77 				sw	$t0,m
   77 004000a4 3c010000		lui	$at,m&0x8000<<1+m>>16
   77 004000a8 ac280000		sw	$t0,m&0xFFFF($at)
   78                   
   79 				lw	$a0,m
   79 004000ac 3c010000		lui	$at,m&0x8000<<1+m>>16
   79 004000b0 8c240000		lw	$a0,m&0xFFFF($at)	
   80 004000b4 0000004c		syscall	$print_int
   81                   
   82 				lw	$t0,m
   82 004000b8 3c010000		lui	$at,m&0x8000<<1+m>>16
   82 004000bc 8c280000		lw	$t0,m&0xFFFF($at)	
   83 				li	$t1,1
   83 004000c0 34090001		ori	$t1,$0,0x01
   84 				li	$t2,2
   84 004000c4 340a0002		ori	$t2,$0,0x02
   85 004000c8 11000004	1:	beqz	$t0,finishpow2
   86 				addi	$t0,-1
   86 004000cc 2108ffff		addi	$t0,$t0,-1
   87 				mul	$t1,$t1,$t2
   87 004000d0 012a0018		mult	$t1,$t2
   87 004000d4 00004812		mflo	$t1
   88 004000d8 08100032		j	1b
   89                   	
   90 			finishpow2:	sw	$t1,N
   90 004000dc 3c010000		lui	$at,N&0x8000<<1+N>>16
   90 004000e0 ac290000		sw	$t1,N&0xFFFF($at)
   91 004000e4 44890000			mtc1	$t1,$f0
   92 004000e8 46800021			cvt.d.w	$f0,$f0
   93 					s.d	$f0,Nfloat
   93 004000ec 3c010000		lui	$at,Nfloat&0x8000<<1+Nfloat>>16
   93 004000f0 e4200000		swc1	$f0,Nfloat&0xFFFF($at)
   93 004000f4 e4210000		swc1	$f0+1,Nfloat&0xFFFF+4($at)
   94                   
   95                   # 		li	$a2,1
   96                   # 		lw	$a0,filehandle
   97                   # 		li	$a1,1
   98                   # 		syscall	$position
   99                   
  100                   	#Going to start reading the elements rom the file.
  101 					lw	$t1,N	#loop counter only doing this 16 times
  101 004000f8 3c010000		lui	$at,N&0x8000<<1+N>>16
  101 004000fc 8c290000		lw	$t1,N&0xFFFF($at)	
  102                   # 		addi	$t1,1
  103 					la	$t8,Data
  103 00400100 3c180000		lui	$t8,0x00
  103 00400104 37180000		ori	$t8,$t8,0x00
  104                   
  105 00400108 8fa40000			lw	$a0,($sp)
  106                   
  107 					li	$t4,'\n
  107 0040010c 340c000a		ori	$t4,$0,0x0A
  108                   	
  109 					la	$a1,onevalbuffer# WRITING TO THIS BUFFER
  109 00400110 3c051001		lui	$a1,0x1001
  109 00400114 34a50008		ori	$a1,$a1,0x08
  110                   
  111 00400118 1920001d	1:		blez	$t1,DoneReading
  112                   		
  113                   		
  114 					li	$a2,8	#number bytes im reading each time
  114 0040011c 34060008		ori	$a2,$0,0x08
  115 					lw	$a0,filehandle
  115 00400120 3c011001		lui	$at,filehandle&0x8000<<1+filehandle>>16
  115 00400124 8c240124		lw	$a0,filehandle&0xFFFF($at)	
  116 00400128 0000038c			syscall	$read
  117 0040012c 04400015			bltz	$v0,ERRORMAYBE
  118 00400130 80a40000			lb	$a0,($a1)
  119 					addi	$a1,16	#load the next byte
  119 00400134 20a50010		addi	$a1,$a1,16
  120 00400138 000002cc			syscall	$print_char
  121 0040013c 1584fff6			bne	$t4,$a0,1b
  122                   # 		blez	$v0,DoneReading		
  123                   		
  124                   		
  125                   # # 		lb	$t3,($v0)
  126                   # # 		lb	$a0,($a1)
  127                   # # 		syscall	$print_char
  128                   # 		
  129                   # # 		li	$a0,'\n
  130                   # # 		syscall	$print_char
  131                   # 		beq	$t4,$a0,convert_storeDataFFT		#found end of line character
  132                   # 		addi	$a1,1
  133                   # 		j	1b
  134                   
  135                   convert_storeDataFFT:	
  136 						li	$t9,'\0
  136 00400140 34190000		ori	$t9,$0,0x00
  137 00400144 a0b90000				sb	$t9,($a1)
  138 						li	$a0,'\n
  138 00400148 3404000a		ori	$a0,$0,0x0A
  139 0040014c 000002cc				syscall	$print_char
  140                   
  141 						la	$a0,onevalbuffer
  141 00400150 3c041001		lui	$a0,0x1001
  141 00400154 34840008		ori	$a0,$a0,0x08
  142 00400158 0000010c				syscall	$print_string
  143 						li	$s5,'\0
  143 0040015c 34150000		ori	$s5,$0,0x00
  144 00400160 a0b5ffff				sb	$s5,-1($a1)
  145 						addi	$t1,-1
  145 00400164 2129ffff		addi	$t1,$t1,-1
  146 00400168 0000078c				syscall	$string2double
  147 						s.d	$f0,($t8)
  147 0040016c e7000000		swc1	$f0,0($t8)
  147 00400170 e7010004		swc1	$f0+1,0+4($t8)
  148 						addi	$t8,16
  148 00400174 23180010		addi	$t8,$t8,16
  149 						la	$a1,onevalbuffer
  149 00400178 3c051001		lui	$a1,0x1001
  149 0040017c 34a50008		ori	$a1,$a1,0x08
  150                   
  151                   
  152                   
  153 00400180 08100046				j	1b
  154                   
  155                   
  156                   
  157                   
  158                   
  159                   
  160                   
  161                   
  162                   ERRORMAYBE:	
  163 					la	$a0,readerrorhandelign
  163 00400184 3c041001		lui	$a0,0x1001
  163 00400188 34840100		ori	$a0,$a0,0x100
  164 0040018c 0000010c			syscall	$print_string
  165                   		
  166 			DoneReading:		lw	$a0,filehandle
  166 00400190 3c011001		lui	$at,filehandle&0x8000<<1+filehandle>>16
  166 00400194 8c240124		lw	$a0,filehandle&0xFFFF($at)	
  167 00400198 00808021				mov	$s0,$a0
  168                   			
  169 0040019c 0000040c				syscall	$close
  170 004001a0 8fdf0000	98:	lw	$ra,fp.ra($fp)	# restore registers from stack
  171 004001a4 8fd00000		lw	$s0,fp.s0($fp)
  172 004001a8 8fd10000		lw	$s1,fp.s1($fp)
  173 004001ac 8fd20000		lw	$s2,fp.s2($fp)
  174 004001b0 8fd30000		lw	$s3,fp.s3($fp)
  175 004001b4 8fd40000		lw	$s4,fp.s4($fp)
  176 004001b8 8fde0000		lw	$fp,fp.fp($fp)
  177 004001bc 23bd0000		add	$sp,$sp,fp.a4-fp.s4
  178 004001c0 03e00008		jr	$ra
  179                   
  180                   
  181                   # have to loook at magnitude of it first off sign is completley indpdent
  182                   # the have to mulitply it by powers of two  if the number is bigger than 
  183                   file.writeData:
  184 004001c4 23bd0000		addi	$sp,$sp,fp.s4-fp.a4	# standard stack frame
  185 004001c8 afbe0000		sw	$fp,fp.fp-fp.s4($sp)
  186 004001cc 23be0000		add	$fp,$sp,fp.fp-fp.s4
  187 004001d0 afdf0000		sw	$ra,fp.ra($fp)
  188 004001d4 afd00000		sw	$s0,fp.s0($fp)
  189 004001d8 afd10000		sw	$s1,fp.s1($fp)
  190 004001dc afd20000		sw	$s2,fp.s2($fp)
  191 004001e0 afd30000		sw	$s3,fp.s3($fp)
  192 004001e4 afd40000		sw	$s4,fp.s4($fp)
  193 004001e8 afc40000		sw	$a0,fp.a0($fp)
  194 004001ec afc50000		sw	$a1,fp.a1($fp)
  195 004001f0 afc60000		sw	$a2,fp.a2($fp)
  196 004001f4 afc70000		sw	$a3,fp.a3($fp)
  197                   
  198                   
  199 				li	$a0,32
  199 004001f8 34040020		ori	$a0,$0,0x20
  200 004001fc 0000024c		syscall	$malloc
  201 00400200 00403821		mov	$a3,$v0
  202 				lw	$t1,N
  202 00400204 3c010000		lui	$at,N&0x8000<<1+N>>16
  202 00400208 8c290000		lw	$t1,N&0xFFFF($at)	
  203 				la	$t0,Data
  203 0040020c 3c080000		lui	$t0,0x00
  203 00400210 35080000		ori	$t0,$t0,0x00
  204                   
  205 				la	$a0,file.output
  205 00400214 3c041001		lui	$a0,0x1001
  205 00400218 34840131		ori	$a0,$a0,0x131
  206 				addi	$a1,_O_RDWR|_O_TEXT
  206 0040021c 20a54000		addi	$a1,$a1,_O_RDWR|_O_TEXT
  207 00400220 0000034c		syscall	$open
  208 00400224 00402021		mov	$a0,$v0	#file handle
  209                   	
  210 				li	$a2,1
  210 00400228 34060001		ori	$a2,$0,0x01
  211 				la	$a1,m
  211 0040022c 3c050000		lui	$a1,0x00
  211 00400230 34a50000		ori	$a1,$a1,0x00
  212 00400234 000003cc		syscall	$write
  213                   
  214                   
  215                   	
  216                   	
  217                   	# also create write data with phasor notaiton 
  218                   
  219                   end:
  220                   
  221                   
  222 00400238 8fdf0000	98:	lw	$ra,fp.ra($fp)	# restore registers from stack
  223 0040023c 8fd00000		lw	$s0,fp.s0($fp)
  224 00400240 8fd10000		lw	$s1,fp.s1($fp)
  225 00400244 8fd20000		lw	$s2,fp.s2($fp)
  226 00400248 8fd30000		lw	$s3,fp.s3($fp)
  227 0040024c 8fd40000		lw	$s4,fp.s4($fp)
  228 00400250 8fde0000		lw	$fp,fp.fp($fp)
  229 00400254 23bd0000		add	$sp,$sp,fp.a4-fp.s4
  230 00400258 03e00008		jr	$ra
  231                   
  232                   	
  233                   
  234                   # 	.data
  235                   # 
  236                   # comparisontable:	.double	1.0e-100,1.0e-10,1.0e-1,1.0,10.0,1.0e10,1.0e100
			